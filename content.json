{"meta":{"title":"My Page","subtitle":"test subtitle","description":"test description","author":"Xiaohao Yan","url":"http://yan-code1.github","root":"/"},"pages":[],"posts":[{"title":"基于UDP的socket多播传输","slug":"UDP_Transmission","date":"2022-03-07T06:54:29.170Z","updated":"2022-03-07T07:02:38.559Z","comments":true,"path":"2022/03/07/UDP_Transmission/","link":"","permalink":"http://yan-code1.github/2022/03/07/UDP_Transmission/","excerpt":"","text":"项目网址：https://github.com/yan-code1/UDP_Transmission组播部分组播发送的数据包只能在同一网络下进行，比如同一路由器、多个交换机组成的单个网络或者路由器桥接组成的单个网络，否则经过两跳后数据将接收不到需要注意的是： 参数注意： MCAST_GRP 和 MCAST_PORT代表组播地址和组播端口，与本地端口和本地IP没半毛钱关系 MULTICAST_TTL参数代表 设置多播组数据的TTL值，范围为0～255之间的任何值； IP_ADD_MEMBERSHIP 代表在指定接口上加入组播组 组播地址范围注意： 224.0.0.0～224.0.0.255为预留的组播地址（永久组地址），地址224.0.0.0保留不做分配，其它地址供路由协议使用。 224.0.1.0～238.255.255.255为用户可用的组播地址（临时组地址），全网范围内有效。 239.0.0.0～239.255.255.255为本地管理组播地址，仅在特定的本地范围内有效。 计算MD5添加唯一标识mreq = struct.pack(\"4sl\", socket.inet_aton(MCAST_GRP), socket.INADDR_ANY) sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)","categories":[],"tags":[]},{"title":"在github上搭建hexo博客主页","slug":"create_web_page","date":"2022-03-04T08:54:02.994Z","updated":"2022-03-07T06:50:12.938Z","comments":true,"path":"2022/03/04/create_web_page/","link":"","permalink":"http://yan-code1.github/2022/03/04/create_web_page/","excerpt":"","text":"这里只介绍win10平台的搭建流程1.搭建前的配置： Github账号 安装Git 下载安装Nodejs和npm，通过 node -v 和 npm -v 命令检查是否安装。2. 为nodejs文件夹配置环境变量（貌似其实用处也不大）3.安装hexo 打开git brashnpm install -g hexo 通过hexo -v命令即可检查是否安装成功，据说好像要将hexo的bin目录加到环境变量，但我不加也没出现问题。 4. 本地搭建 新建文件夹Blog（可自定义），然后在该文件夹下进入git brash,执行：hexo init # 下载hexo默认主题 hexo s --debug -p 8888 # 即可在local:8888查看博客 5.GitHub ssh key配置 配置全局用户以免每次输入密码,yourname 和 youremail分别指你的github用户名以及github绑定的邮箱git config --global user.name yourname git config --global user.email youremail 生成秘钥和公钥ssh -keygen -t rsa -C \"youremail\" # 执行了这个命令会提示存储路径和密码以及确认密码：你连续按三次Enter就好 到用户文件夹下/.ssh/打开id_rsa.pub文件，即为公钥文件,等会新建github ssh key要用。 进入github主页，点击右边的设置进入ssh and GPG keys, 新建ssh key 复制刚才的公钥到key ,title随便写。 完成后执行ssh -T git@github.com 出现Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.6.部署到github 到github主页新建仓库 username.github.io , username 为你的账户名 修改Blog配置文件__config.yml,打开拉到最底下，修改最后两行为如下，repo为仓库的ssh地址deploy: type: git repo: git@github.com:username/username.github.io.git 最后进行部署```hexo cleanhexo ghexo d 若执行hexo d有错误：ERROR Deployer not found: git则执行：npm install –save hexo-deployer-git + 访问：直接访问username.github.io即可","categories":[],"tags":[]},{"title":"调用google speech recognition实现语音片段识别","slug":"google-speech","date":"2021-12-17T08:51:21.594Z","updated":"2022-03-07T07:17:08.521Z","comments":true,"path":"2021/12/17/google-speech/","link":"","permalink":"http://yan-code1.github/2021/12/17/google-speech/","excerpt":"","text":"代码位置：环境配置：win10 安装PyAudio ,高版本python直接pip会报错，可能需要用源码安装，这里提供3.7的源码:pypi.python.org/pypi/PyAudio https://github.com/intxcc/pyaudio_portaudio/releases pip install SpeechRecognition谷歌语音识别库，需要联网 需要注意的是 该识别仅支持音频格式为.wav，有需要可以利用ffmpeg进行格式转换： ** ffmpeg -i test.m4s out.wav ** 仅支持片段识别，时间过长会导致请求失败，需要添加切片的功能 有两种调用方式，一种是直接读取语音文件，第二种是读取麦克风 函数进行识别语音范围指定（按时长），duration为终点，offset为起点；record(source,duration=None,offset=None) recognize_google(audioFile,language =’en-US’)语言选择en-US,zh-CN import speech_recognition as sr import os r = sr.Recognizer() # use microphone # with sr.Microphone() as source: # print(\"Say something!\") # audio = r.listen(source) # use audio file file_path = 'ts/1.wav' audioFile = sr.AudioFile(file_path) with audioFile as source: audio = r.record(source) # r.recognize_sphinx(audio, language='zh_CN') # 选择语言 # 选择翻译片段 try: text = r.recognize_google(audio) print(\"You said: \" + text) except sr.UnknownValueError: print(\"Google Speech Recognition could not understand audio\") except sr.RequestError as e: print(\"Could not request results from Google Speech Recognition service\" + format(e)) 利用多线程实现了批量快速识别： https://github.com/yan-code1/TrainingCode/blob/main/TrainCode/someTools/AudioVideoProcess/audioRecGoogle.py","categories":[],"tags":[]}],"categories":[],"tags":[]}